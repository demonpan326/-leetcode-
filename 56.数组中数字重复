class Solution:
    def singleNumbers(self, nums: List[int]) -> List[int]:
        ret = 0  # 所有数字异或的结果
        a = 0
        b = 0
        for n in nums:
            ret ^= n
        # 找到第一位不是0的
        h = 1
        while(ret & h == 0):
            h <<= 1
        for n in nums:
            # 根据该位是否为0将其分为两组
            if (h & n == 0):
                a ^= n
            else:
                b ^= n

        return [a, b]

作者：fe-lucifer
链接：https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/solution/zhi-chu-xian-yi-ci-de-shu-xi-lie-wei-yun-suan-by-a/


异或操作，太牛了，自己没想到。。。。。
因为只有两个不同的数，所以整个数组异或必然为True，那么结果数位中至少有一位是1，而找到这一位就可以，其他位置零，
这样两个不同的数与其&操作就会有不同的结果，这样我们再进行异或就行。之所以再进行异或是因为对于相同的数，其异或为真，所以最终
还是真与要找的某个数异或，那么异或结果必然为那个数。
