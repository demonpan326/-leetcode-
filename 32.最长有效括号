class Solution(object):
    def longestValidParentheses(self, s):
        stack = []
        n = len(s)
        if n == 0 or n == 1:
            return 0
        summ = []
        for i in range(n):
            if stack and s[i] == ')' and s[stack[-1]] == '(':
                summ.append(stack[-1])
                summ.append(i)
                stack.pop()
            else:
                stack.append(i)
        dui = 0
        x = 0
        summ.sort()
        if len(summ)!=0:
            i = 1
            dui=1
            while i < len(summ):
                if summ[i-1] == (summ[i ]-1) :
                    i =i+1
                    dui += 1
                else:
                    x = max(x, dui)
                    dui = 1
                    i=i+1
        x = max(x, dui)

        return x
LeeCode官网上的栈方法：
public class Solution {

    public int longestValidParentheses(String s) {
        int maxans = 0;
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } else {
                stack.pop();
                if (stack.empty()) {
                    stack.push(i);
                } else {
                    maxans = Math.max(maxans, i - stack.peek());
                }
            }
        }
        return maxans;
    }
}
链接：https://leetcode-cn.com/problems/longest-valid-parentheses/solution/zui-chang-you-xiao-gua-hao-by-leetcode/
来源：力扣（LeetCode）

空间复杂度为O（1）的方法如下,技巧很六：
public class Solution {
    public int longestValidParentheses(String s) {
        int left = 0, right = 0, maxlength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * right);
            } else if (right >= left) {
                left = right = 0;
            }
        }
        left = right = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * left);
            } else if (left >= right) {
                left = right = 0;
            }
        }
        return maxlength;
    }
}
